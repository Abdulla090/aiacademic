import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { KurdishPDFService } from '@/services/kurdishPdfService';

const KurdishPDFTest: React.FC = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [testResults, setTestResults] = useState<string[]>([]);

  // Prepared test texts - Kurdish and Arabic for comparison
  const testTexts = {
    basic: `ÿ≥⁄µÿßŸà ŸÑ€ï Ÿá€ïŸÖŸàÿßŸÜÿ™ÿßŸÜ! ÿ¶€ïŸÖ€ï ÿ™ÿßŸÇ€å⁄©ÿ±ÿØŸÜ€ïŸà€ï€å€ï⁄©€ï ÿ®€Ü ŸÜŸàŸàÿ≥€åŸÜ€å ⁄©Ÿàÿ±ÿØ€å.`,
    
    arabic: `ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ! Ÿáÿ∞ÿß ÿßÿÆÿ™ÿ®ÿßÿ± ŸÑŸÑŸÜÿµ ÿßŸÑÿπÿ±ÿ®Ÿä ŸÅŸä ŸÖŸÑŸÅ PDF.`,
    
    comprehensive: `## Ÿæ€éŸÜÿßÿ≥€ï€å ÿ≤€åÿ±€ï⁄©€å ÿØ€ïÿ≥ÿ™⁄©ÿ±ÿØ (AI): ⁄Ü€ïŸÖ⁄© Ÿà ÿ®ŸÜ€ïŸÖÿß⁄©ÿßŸÜ

ÿ¶€ïŸÖ ÿ®€ïÿ¥€ï ÿ™€åÿ¥⁄© ÿØ€ïÿÆÿßÿ™€ï ÿ≥€ïÿ± ⁄Ü€ïŸÖ⁄© Ÿà ÿ®ŸÜ€ïŸÖÿß ÿ≥€ïÿ±€ï⁄©€å€å€ï⁄©ÿßŸÜ€å ÿ≤€åÿ±€ï⁄©€å ÿØ€ïÿ≥ÿ™⁄©ÿ±ÿØ (AI). 

### ÿ™ÿß€åÿ®€ïÿ™ŸÖ€ïŸÜÿØ€å€å€ï⁄©ÿßŸÜ€å ⁄©Ÿàÿ±ÿØ€å:
- ⁄ï€ïÿ¥€ï⁄©€ï: ⁄ï
- €Ü (ŸàÿßŸà): €Ü  
- ⁄§€ï⁄©ÿßŸÜ: ⁄§
- ⁄µÿßŸÖÿß⁄©ÿßŸÜ: ⁄µ
- €é⁄©ÿßÿ±€ï⁄©ÿßŸÜ: €é
- €ïŸá€ï€å ⁄©Ÿàÿ±ÿ™: €ï
- ⁄Ü€åŸÖ€ïŸÜ: ⁄Ü
- Ÿæ€é⁄©ÿßŸÜ: Ÿæ
- ⁄Ø€ï⁄µÿß⁄©ÿßŸÜ: ⁄Ø
- ⁄ò€åÿßŸÜ: ⁄ò

*ÿ≤€åÿ±€ï⁄©€å ÿØ€ïÿ≥ÿ™⁄©ÿ±ÿØ ÿ®€ï⁄Øÿ¥ÿ™€å Ÿà€ï⁄© ÿ™ŸàÿßŸÜÿß€å ÿ¶ÿßŸÖ€éÿ±€é⁄© ÿ®€Ü ŸÑÿßÿ≥ÿß€å€å⁄©ÿ±ÿØŸÜ€ïŸà€ï€å ÿ™ŸàÿßŸÜÿß ŸÖÿ±€Ü€å€å€ï⁄©ÿßŸÜ Ÿæ€éŸÜÿßÿ≥€ï ÿØ€ï⁄©ÿ±€éÿ™.*

> **ÿ≤€åÿ±€ï⁄©€å ÿØ€ïÿ≥ÿ™⁄©ÿ±ÿØ ÿ®ÿ±€åÿ™€å€å€ï ŸÑ€ï Ÿá€ïŸà⁄µÿØÿßŸÜ ÿ®€Ü ÿØÿ±Ÿàÿ≥ÿ™⁄©ÿ±ÿØŸÜ€å ÿ¶ÿßŸÖ€éÿ±⁄Ø€ïŸÑ€é⁄© ⁄©€ï ÿ®ÿ™ŸàÿßŸÜŸÜ ÿ®€åÿ± ÿ®⁄©€ïŸÜ€ïŸà€ïÿå ŸÅ€éÿ± ÿ®ÿ®ŸÜÿå Ÿà ⁄©€éÿ¥€ï⁄©ÿßŸÜ ⁄Üÿßÿ±€ïÿ≥€ïÿ± ÿ®⁄©€ïŸÜ Ÿà€ï⁄© ŸÖÿ±€Ü⁄§.**`,

    arabicComprehensive: `## ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä: ÿßŸÑŸÖŸÅÿßŸáŸäŸÖ ŸàÿßŸÑÿ£ÿ≥ÿ≥

Ÿáÿ∞ÿß ÿßŸÑŸÇÿ≥ŸÖ Ÿäÿ≥ŸÑÿ∑ ÿßŸÑÿ∂Ÿàÿ° ÿπŸÑŸâ ÿßŸÑŸÖŸÅÿßŸáŸäŸÖ ŸàÿßŸÑÿ£ÿ≥ÿ≥ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä.

### ÿÆÿµÿßÿ¶ÿµ ÿßŸÑŸÜÿµ ÿßŸÑÿπÿ±ÿ®Ÿä:
- ÿßŸÑÿ£ÿ≠ÿ±ŸÅ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©: ÿß ÿ® ÿ™ ÿ´ ÿ¨ ÿ≠ ÿÆ ÿØ ÿ∞ ÿ± ÿ≤ ÿ≥ ÿ¥ ÿµ ÿ∂ ÿ∑ ÿ∏ ÿπ ÿ∫ ŸÅ ŸÇ ŸÉ ŸÑ ŸÖ ŸÜ Ÿá Ÿà Ÿä
- ÿßŸÑÿ™ÿ¥ŸÉŸäŸÑ: Ÿé Ÿê Ÿè Ÿã Ÿç Ÿå Ÿë Ÿí
- ÿßŸÑÿßÿ™ÿ¨ÿßŸá: ŸÖŸÜ ÿßŸÑŸäŸÖŸäŸÜ ÿ•ŸÑŸâ ÿßŸÑŸäÿ≥ÿßÿ±

*ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸäŸèÿπÿ±ŸéŸëŸÅ ÿπŸÖŸàŸÖŸãÿß ŸÉŸÇÿØÿ±ÿ© ÿßŸÑÿ¢ŸÑÿ© ÿπŸÑŸâ ŸÖÿ≠ÿßŸÉÿßÿ© ÿßŸÑŸÇÿØÿ±ÿßÿ™ ÿßŸÑÿ®ÿ¥ÿ±Ÿäÿ©.*

> **ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸáŸà ŸÖÿ≠ÿßŸàŸÑÿ© ŸÑÿ•ŸÜÿ¥ÿßÿ° ÿ¢ŸÑÿßÿ™ ŸäŸÖŸÉŸÜŸáÿß ÿßŸÑÿ™ŸÅŸÉŸäÿ± ŸàÿßŸÑÿ™ÿπŸÑŸÖ Ÿàÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ŸÖÿ´ŸÑ ÿßŸÑÿ®ÿ¥ÿ±.**`,

    special: `### ÿ™€ï⁄©ŸÜ€ïŸÑ€Ü⁄ò€åÿß€å ŸÜŸà€é:
1. **ŸÅ€éÿ±ÿ®ŸàŸàŸÜ€å ÿ¶ÿßŸÖ€éÿ±€å (Machine Learning)**
2. **Ÿæÿ±€Üÿ≥€éÿ≥⁄©ÿ±ÿØŸÜ€å ÿ≤ŸÖÿßŸÜ€å ÿ≥ÿ±Ÿàÿ¥ÿ™€å (NLP)**  
3. **ÿ®€åŸÜ€åŸÜ€å ⁄©€ÜŸÖŸæ€åŸàÿ™€ïÿ±€å (Computer Vision)**
4. **⁄ï€Üÿ®€Üÿ™€å⁄© (Robotics)**

⁄©Ÿàÿ±ÿØÿ≥ÿ™ÿßŸÜÿå ÿ®€ïÿ∫ÿØÿßÿØÿå Ÿá€ïŸàŸÑ€éÿ±ÿå ÿ≥ŸÑ€éŸÖÿßŸÜ€åÿå ÿØŸá€Ü⁄©
ÿ¶€ï⁄§€åŸÜÿå ÿÆ€Üÿ¥€ïŸà€åÿ≥ÿ™€åÿå ⁄ï€éÿ≤⁄Øÿ±ÿ™ŸÜÿå ÿØ€Üÿ≥ÿ™ÿß€å€ïÿ™€å`,

    arabicSpecial: `### ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑÿ≠ÿØŸäÿ´ÿ©:
1. **ÿßŸÑÿ™ÿπŸÑŸÖ ÿßŸÑÿ¢ŸÑŸä (Machine Learning)**
2. **ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ© (NLP)**
3. **ÿßŸÑÿ±ÿ§Ÿäÿ© ÿßŸÑÿ≠ÿßÿ≥Ÿàÿ®Ÿäÿ© (Computer Vision)**
4. **ÿßŸÑÿ±Ÿàÿ®Ÿàÿ™ÿßÿ™ (Robotics)**

ÿßŸÑÿπÿ±ÿßŸÇÿå ÿ®ÿ∫ÿØÿßÿØÿå ÿ£ÿ±ÿ®ŸäŸÑÿå ÿßŸÑÿ≥ŸÑŸäŸÖÿßŸÜŸäÿ©ÿå ÿØŸáŸàŸÉ
ÿßŸÑÿ≠ÿ®ÿå ÿßŸÑŸÖŸàÿØÿ©ÿå ÿßŸÑÿßÿ≠ÿ™ÿ±ÿßŸÖÿå ÿßŸÑÿµÿØÿßŸÇÿ©`
  };

  const addTestResult = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setTestResults(prev => [...prev, `[${timestamp}] ${message}`]);
  };

  const testBasicPDF = async () => {
    try {
      setIsGenerating(true);
      addTestResult('üß™ Starting Basic Kurdish PDF Test...');
      
      const pdfService = new KurdishPDFService();
      
      // Load Kurdish fonts
      addTestResult('üìú Loading Kurdish fonts...');
      const loadedFont = await pdfService.loadKurdishFontsWithFallback();
      addTestResult(`‚úÖ Font loaded: ${loadedFont}`);
      
      const doc = pdfService.getDoc();
      doc.setFontSize(16);
      
      // Test basic text
      addTestResult('üìù Adding basic Kurdish text...');
      addTestResult(`Text to add: ${testTexts.basic}`);
      
      pdfService.addKurdishText(testTexts.basic, 20, 30);
      
      // Save PDF
      const filename = `kurdish-test-basic-${Date.now()}.pdf`;
      pdfService.save(filename);
      
      addTestResult(`‚úÖ Basic PDF generated: ${filename}`);
      toast.success('Basic Kurdish PDF test completed!');
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addTestResult(`‚ùå Basic test failed: ${errorMsg}`);
      toast.error('Basic test failed: ' + errorMsg);
      console.error('Basic test error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const testComprehensivePDF = async () => {
    try {
      setIsGenerating(true);
      addTestResult('üß™ Starting Comprehensive Kurdish PDF Test...');
      
      const pdfService = new KurdishPDFService();
      
      // Load Kurdish fonts
      addTestResult('üìú Loading Kurdish fonts...');
      const loadedFont = await pdfService.loadKurdishFontsWithFallback();
      addTestResult(`‚úÖ Font loaded: ${loadedFont}`);
      
      const doc = pdfService.getDoc();
      
      // Test comprehensive text with formatting
      addTestResult('üìù Adding comprehensive Kurdish text with formatting...');
      
      // Title
      doc.setFontSize(18);
      addTestResult('Adding title: ÿ™€ï⁄©ŸÜ€ïŸÑ€Ü⁄ò€åÿß€å ÿ≤€åÿ±€ï⁄©€å ÿØ€ïÿ≥ÿ™⁄©ÿ±ÿØ');
      pdfService.addKurdishText('ÿ™€ï⁄©ŸÜ€ïŸÑ€Ü⁄ò€åÿß€å ÿ≤€åÿ±€ï⁄©€å ÿØ€ïÿ≥ÿ™⁄©ÿ±ÿØ', 20, 30);
      
      // Content
      doc.setFontSize(12);
      const lines = testTexts.comprehensive.split('\n').filter(line => line.trim());
      let yPosition = 50;
      
      for (const line of lines) {
        if (line.trim()) {
          addTestResult(`Adding line: ${line.substring(0, 50)}...`);
          pdfService.addKurdishText(line.trim(), 20, yPosition);
          yPosition += 15;
          
          // Add new page if needed
          if (yPosition > 270) {
            doc.addPage();
            yPosition = 30;
          }
        }
      }
      
      // Save PDF
      const filename = `kurdish-test-comprehensive-${Date.now()}.pdf`;
      pdfService.save(filename);
      
      addTestResult(`‚úÖ Comprehensive PDF generated: ${filename}`);
      toast.success('Comprehensive Kurdish PDF test completed!');
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addTestResult(`‚ùå Comprehensive test failed: ${errorMsg}`);
      toast.error('Comprehensive test failed: ' + errorMsg);
      console.error('Comprehensive test error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const testArabicPDF = async () => {
    try {
      setIsGenerating(true);
      addTestResult('üá∏üá¶ Starting Arabic PDF Test...');
      
      const pdfService = new KurdishPDFService();
      
      // Load fonts (should work for Arabic too)
      addTestResult('üìú Loading fonts for Arabic...');
      const loadedFont = await pdfService.loadKurdishFontsWithFallback();
      addTestResult(`‚úÖ Font loaded: ${loadedFont}`);
      
      const doc = pdfService.getDoc();
      doc.setFontSize(16);
      
      // Test basic Arabic text
      addTestResult('üìù Adding basic Arabic text...');
      addTestResult(`Arabic text to add: ${testTexts.arabic}`);
      
      pdfService.addKurdishText(testTexts.arabic, 20, 30);
      
      // Save PDF
      const filename = `arabic-test-basic-${Date.now()}.pdf`;
      pdfService.save(filename);
      
      addTestResult(`‚úÖ Arabic PDF generated: ${filename}`);
      toast.success('Arabic PDF test completed!');
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addTestResult(`‚ùå Arabic test failed: ${errorMsg}`);
      toast.error('Arabic test failed: ' + errorMsg);
      console.error('Arabic test error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const testComprehensiveArabicPDF = async () => {
    try {
      setIsGenerating(true);
      addTestResult('üá∏üá¶ Starting Comprehensive Arabic PDF Test...');
      
      const pdfService = new KurdishPDFService();
      
      // Load fonts
      addTestResult('üìú Loading fonts for Arabic...');
      const loadedFont = await pdfService.loadKurdishFontsWithFallback();
      addTestResult(`‚úÖ Font loaded: ${loadedFont}`);
      
      const doc = pdfService.getDoc();
      
      // Test comprehensive Arabic text with formatting
      addTestResult('üìù Adding comprehensive Arabic text with formatting...');
      
      // Title
      doc.setFontSize(18);
      addTestResult('Adding Arabic title: ÿ™ŸÇŸÜŸäÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä');
      pdfService.addKurdishText('ÿ™ŸÇŸÜŸäÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä', 20, 30);
      
      // Content
      doc.setFontSize(12);
      const lines = testTexts.arabicComprehensive.split('\n').filter(line => line.trim());
      let yPosition = 50;
      
      for (const line of lines) {
        if (line.trim()) {
          addTestResult(`Adding Arabic line: ${line.substring(0, 50)}...`);
          pdfService.addKurdishText(line.trim(), 20, yPosition);
          yPosition += 15;
          
          // Add new page if needed
          if (yPosition > 270) {
            doc.addPage();
            yPosition = 30;
          }
        }
      }
      
      // Save PDF
      const filename = `arabic-test-comprehensive-${Date.now()}.pdf`;
      pdfService.save(filename);
      
      addTestResult(`‚úÖ Comprehensive Arabic PDF generated: ${filename}`);
      toast.success('Comprehensive Arabic PDF test completed!');
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addTestResult(`‚ùå Comprehensive Arabic test failed: ${errorMsg}`);
      toast.error('Comprehensive Arabic test failed: ' + errorMsg);
      console.error('Comprehensive Arabic test error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const testCharacterSpecific = async () => {
    try {
      setIsGenerating(true);
      addTestResult('üß™ Starting Character-Specific Kurdish PDF Test...');
      
      const pdfService = new KurdishPDFService();
      
      // Load Kurdish fonts
      addTestResult('üìú Loading Kurdish fonts...');
      const loadedFont = await pdfService.loadKurdishFontsWithFallback();
      addTestResult(`‚úÖ Font loaded: ${loadedFont}`);
      
      const doc = pdfService.getDoc();
      doc.setFontSize(14);
      
      // Test each Kurdish-specific character individually
      const kurdishChars = ['⁄ï', '€Ü', '⁄§', '⁄µ', '€é', '€ï', '⁄Ü', 'Ÿæ', '⁄Ø', '⁄ò'];
      let yPosition = 30;
      
      addTestResult('üî§ Testing individual Kurdish characters...');
      
      for (const char of kurdishChars) {
        const testLine = `${char} - ÿ™ÿßŸÇ€å⁄©ÿ±ÿØŸÜ€ïŸà€ï€å Ÿæ€åÿ™€å ${char} ŸÑ€ï Ÿàÿ¥€ï€å ŸÜŸÖŸàŸàŸÜ€ïÿØÿß: ${char}€ï⁄©ÿßŸÜ`;
        addTestResult(`Testing character: ${char}`);
        pdfService.addKurdishText(testLine, 20, yPosition);
        yPosition += 20;
      }
      
      // Test special character combinations
      yPosition += 10;
      pdfService.addKurdishText('--- ÿ™€é⁄©€ï⁄µ€å Ÿæ€åÿ™€ï ÿ™ÿß€åÿ®€ïÿ™€ï⁄©ÿßŸÜ ---', 20, yPosition);
      yPosition += 20;
      
      const combinations = [
        '⁄ï€Ü⁄ò⁄Øÿßÿ±€å ŸÜŸà€é',
        '⁄§€åÿØ€å€Ü€å ÿ¨ŸàÿßŸÜ', 
        '⁄µ€ï⁄Ø€ï⁄µ ŸáÿßŸà⁄ï€é⁄©ÿßŸÜ',
        '€éŸàÿßÿ±€ï€å ÿÆ€Üÿ¥',
        '€ïŸà€ï ÿ®€Ü ÿ¶€ïŸà€ï',
        '⁄Ü€åÿ±€Ü⁄©€å ⁄©Ÿàÿ±ÿØ',
        'Ÿæ€é⁄©€ïŸÜ€åŸÜ€å ÿ≤€Üÿ±',
        '⁄Ø€ïÿ¥ÿ™€å ÿØŸàŸàÿ±',
        '⁄ò€åÿßŸÜ€å ÿ®ÿßÿ¥'
      ];
      
      for (const combo of combinations) {
        addTestResult(`Testing combination: ${combo}`);
        pdfService.addKurdishText(combo, 20, yPosition);
        yPosition += 15;
      }
      
      // Save PDF
      const filename = `kurdish-test-characters-${Date.now()}.pdf`;
      pdfService.save(filename);
      
      addTestResult(`‚úÖ Character-specific PDF generated: ${filename}`);
      toast.success('Character-specific Kurdish PDF test completed!');
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addTestResult(`‚ùå Character test failed: ${errorMsg}`);
      toast.error('Character test failed: ' + errorMsg);
      console.error('Character test error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // WORKING Kurdish PDF with YOUR font
  const testWorkingKurdishPDF = async () => {
    setIsGenerating(true);
    
    try {
      console.log('üéØ TESTING WORKING Kurdish PDF with YOUR font');
      addTestResult('üéØ WORKING Kurdish PDF - using YOUR UniSalar_F_095.otf');
      
      const title = 'ÿ™ÿßŸÇ€å⁄©ÿ±ÿØŸÜ€ïŸà€ï€å ⁄©Ÿàÿ±ÿØ€å';
      const content = `ÿ≥⁄µÿßŸà ŸÑ€ï Ÿá€ïŸÖŸàÿßŸÜÿ™ÿßŸÜ! ÿ¶€ïŸÖ€ï ÿ™ÿßŸÇ€å⁄©ÿ±ÿØŸÜ€ïŸà€ï€å€ï⁄©€ï ÿ®€Ü ŸÜŸàŸàÿ≥€åŸÜ€å ⁄©Ÿàÿ±ÿØ€å.
⁄©Ÿàÿ±ÿØ€å ÿ≥€Üÿ±ÿßŸÜ€å ÿ≤ŸÖÿßŸÜ€å ŸÜ€ïÿ™€ïŸà€ï€å€å ⁄©Ÿàÿ±ÿØ€ï.
⁄ï€Ü⁄ò⁄Øÿßÿ± Ÿæ⁄ï ŸÑ€ï Ÿá€ïŸàŸÑ€é⁄©€å ÿ≤ÿßŸÜÿ≥ÿ™€å€ï.
⁄ï €Ü ⁄§ ⁄µ €é €ï ⁄Ü Ÿæ ⁄Ø ⁄ò`;
      
      addTestResult('üìÅ Loading YOUR UniSalar_F_095.otf font...');
      
      await createKurdishPDFWithYourFont(title, content, 'WORKING-kurdish.pdf');
      
      toast.success('üéâ WORKING Kurdish PDF created with YOUR font!');
      addTestResult('‚úÖ SUCCESS: PDF created with YOUR UniSalar font');
      addTestResult('üìÅ File saved as: WORKING-kurdish.pdf');
      
    } catch (error) {
      console.error('‚ùå WORKING test failed:', error);
      toast.error(`WORKING test failed: ${error.message}`);
      addTestResult(`‚ùå WORKING test failed: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  // ULTIMATE DIRECT TEST - Zero processing
  const testUltimateDirectKurdish = async () => {
    setIsGenerating(true);
    
    try {
      console.log('üö® ULTIMATE DIRECT TEST');
      addTestResult('üö® ULTIMATE DIRECT TEST - Zero processing, pure jsPDF + your font');
      
      const result = await testDirectKurdish();
      
      if (result) {
        toast.success('üéâ ULTIMATE test completed! Check ULTIMATE-direct-test.pdf');
        addTestResult('‚úÖ ULTIMATE test: PDF generated with ZERO text processing');
        addTestResult('üìÅ File: ULTIMATE-direct-test.pdf');
      } else {
        toast.error('‚ùå ULTIMATE test failed');
        addTestResult('‚ùå ULTIMATE test failed - check console');
      }
      
    } catch (error) {
      console.error('‚ùå ULTIMATE test error:', error);
      toast.error(`ULTIMATE test error: ${error.message}`);
      addTestResult(`‚ùå ULTIMATE test error: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  // Test DIRECT Kurdish PDF (bypasses all jsPDF processing)
  const testDirectKurdishPDF = async () => {
    setIsGenerating(true);
    
    try {
      console.log('üö® TESTING DIRECT Kurdish PDF approach');
      addTestResult('üö® Starting DIRECT Kurdish PDF test (bypassing ALL jsPDF processing)...');
      
      const directPdf = new DirectKurdishPDF();
      
      const testText = `ÿ≥⁄µÿßŸà ŸÑ€ï Ÿá€ïŸÖŸàÿßŸÜÿ™ÿßŸÜ! ÿ¶€ïŸÖ€ï ÿ™ÿßŸÇ€å⁄©ÿ±ÿØŸÜ€ïŸà€ï€å€ï⁄©€ï ÿ®€Ü ŸÜŸàŸàÿ≥€åŸÜ€å ⁄©Ÿàÿ±ÿØ€å.
⁄©Ÿàÿ±ÿØ€å ÿ≥€Üÿ±ÿßŸÜ€å ÿ≤ŸÖÿßŸÜ€å ŸÜ€ïÿ™€ïŸà€ï€å€å ⁄©Ÿàÿ±ÿØ€ï.
⁄ï€Ü⁄ò⁄Øÿßÿ± Ÿæ⁄ï ŸÑ€ï Ÿá€ïŸàŸÑ€é⁄©€å ÿ≤ÿßŸÜÿ≥ÿ™€å€ï.
⁄ï €Ü ⁄§ ⁄µ €é €ï ⁄Ü Ÿæ ⁄Ø ⁄ò`;
      
      addTestResult('üéØ Loading YOUR UniSalar font directly...');
      await directPdf.createTestPDF(testText);
      directPdf.save('DIRECT-kurdish-test.pdf');
      
      toast.success('üö® DIRECT Kurdish PDF created! Check the download.');
      addTestResult('‚úÖ DIRECT approach: PDF generated without ANY jsPDF text processing');
      addTestResult('üìÅ File saved as: DIRECT-kurdish-test.pdf');
      
    } catch (error) {
      console.error('‚ùå DIRECT test failed:', error);
      toast.error(`DIRECT test failed: ${error.message}`);
      addTestResult(`‚ùå DIRECT approach failed: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const testHTMLToPDF = async () => {
    try {
      setIsGenerating(true);
      addTestResult('üÜï Starting HTML-to-PDF Kurdish Test...');
      
      addTestResult('üìù Using HTML rendering approach...');
      await AlternativeKurdishPDF.generateFromHTML(testTexts.basic);
      
      addTestResult('‚úÖ HTML-based PDF generated successfully!');
      toast.success('HTML-based Kurdish PDF test completed!');
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addTestResult(`‚ùå HTML test failed: ${errorMsg}`);
      toast.error('HTML test failed: ' + errorMsg);
      console.error('HTML test error:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const clearResults = () => {
    setTestResults([]);
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üß™ Kurdish PDF Test Laboratory
          </CardTitle>
          <CardDescription>
            Comprehensive testing environment for Kurdish Sorani PDF generation debugging
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Kurdish Tests */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-center">üè¥ Kurdish Tests</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Button 
                onClick={testBasicPDF}
                disabled={isGenerating}
                className="w-full"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üî§ Basic Kurdish Test'}
              </Button>
              
              <Button 
                onClick={testComprehensivePDF}
                disabled={isGenerating}
                variant="outline"
                className="w-full"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üìÑ Comprehensive Kurdish'}
              </Button>
              
              <Button 
                onClick={testCharacterSpecific}
                disabled={isGenerating}
                variant="secondary"
                className="w-full"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üîç Kurdish Characters'}
              </Button>
            </div>
          </div>

          {/* Arabic Tests */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-center">üá∏üá¶ Arabic Tests (for comparison)</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Button 
                onClick={testArabicPDF}
                disabled={isGenerating}
                variant="default"
                className="w-full bg-green-600 hover:bg-green-700"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üî§ Basic Arabic Test'}
              </Button>
              
              <Button 
                onClick={testComprehensiveArabicPDF}
                disabled={isGenerating}
                variant="outline"
                className="w-full border-green-600 text-green-600 hover:bg-green-50"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üìÑ Comprehensive Arabic'}
              </Button>
            </div>
          </div>

          {/* WORKING METHOD WITH YOUR FONT */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-center">üéØ YOUR FONT - WORKING METHOD</h3>
            <div className="grid grid-cols-1 gap-4">
              <Button 
                onClick={testWorkingKurdishPDF}
                disabled={isGenerating}
                className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üéØ USE YOUR UNISALAR FONT NOW'}
              </Button>
            </div>
          </div>

          {/* ULTIMATE DIRECT METHOD */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-center">üî• ULTIMATE DIRECT TEST</h3>
            <div className="grid grid-cols-1 gap-4">
              <Button 
                onClick={testUltimateDirectKurdish}
                disabled={isGenerating}
                className="w-full bg-orange-600 hover:bg-orange-700"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üî• ULTIMATE: Pure jsPDF + Your Font'}
              </Button>
            </div>
          </div>

          {/* Emergency Direct Method */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-center">üö® EMERGENCY DIRECT METHOD</h3>
            <div className="grid grid-cols-1 gap-4">
              <Button 
                onClick={testDirectKurdishPDF}
                disabled={isGenerating}
                variant="destructive"
                className="w-full bg-red-600 hover:bg-red-700"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üö® DIRECT Kurdish PDF (No Processing)'}
              </Button>
            </div>
          </div>

          {/* Alternative Method */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-3 text-center">üÜï Alternative Method</h3>
            <div className="grid grid-cols-1 gap-4">
              <Button 
                onClick={testHTMLToPDF}
                disabled={isGenerating}
                variant="outline"
                className="w-full"
              >
                {isGenerating ? '‚è≥ Testing...' : 'üÜï HTML to PDF Test'}
              </Button>
            </div>
          </div>
          
          <Button 
            onClick={clearResults}
            variant="destructive"
            size="sm"
            className="w-full md:w-auto"
          >
            üóëÔ∏è Clear Test Results
          </Button>
        </CardContent>
      </Card>

      {/* Test Preview Texts */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Basic Test Text</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-sm font-mono bg-muted p-3 rounded text-right" dir="rtl">
              {testTexts.basic}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Character Test</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-sm font-mono bg-muted p-3 rounded text-right" dir="rtl">
              ⁄ï €Ü ⁄§ ⁄µ €é €ï ⁄Ü Ÿæ ⁄Ø ⁄ò
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Special Combinations</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-sm font-mono bg-muted p-3 rounded text-right" dir="rtl">
              ⁄ï€Ü⁄ò⁄Øÿßÿ±ÿå ⁄§€åÿØ€å€Üÿå ⁄µ€ï⁄Ø€ï⁄µÿå €éŸàÿßÿ±€ï
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Test Results */}
      {testResults.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-sm">Test Results Log</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-black text-green-400 p-4 rounded font-mono text-xs max-h-96 overflow-y-auto">
              {testResults.map((result, index) => (
                <div key={index} className="mb-1">
                  {result}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default KurdishPDFTest;